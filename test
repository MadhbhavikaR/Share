<?xml version="1.0" encoding="UTF-8"?>
<!--
FIXME : 1. Pre delete cooldown missing, should be  ${pre_delete_cooldown} which is in seconds like other timers here
            Cancelled to Pre delete timer if the timer expires state will change to user Task soft DELETED
            if before the timer expires if there is a request to cancel the timer then it should cancel the timer and if and only if the previous state was production then it should move to production.
            else it should any way move to Soft delete after the timer expires. on any error offcourse it should move to error
            Some thing of this sort
             Cancelled State
    <userTask id="Cancelled" name="Cancelled" />
    <sequenceFlow id="flowCancelledToPreDeleteCooldown" sourceRef="Cancelled" targetRef="PreDeleteCooldown" />

    Pre Delete Cooldown Timer
    <intermediateCatchEvent id="PreDeleteCooldownTimer" name="Pre Delete Cooldown Timer">
      <timerEventDefinition>
        <timeDuration xsi:type="tFormalExpression"><![CDATA[PT${PreDeleteCooldownSeconds}S]]></timeDuration>
      </timerEventDefinition>
    </intermediateCatchEvent>
    <sequenceFlow id="flowPreDeleteCooldownToSoftDeleted" sourceRef="PreDeleteCooldownTimer" targetRef="SoftDeleted" />

    Pre Delete Cooldown State
    <userTask id="PreDeleteCooldown" name="Pre Delete Cooldown" />
    <sequenceFlow id="flowPreDeleteCooldownToProduction" sourceRef="PreDeleteCooldown" targetRef="Production">
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[nextState == 'Production' && previousState == 'Production']]></conditionExpression>
    </sequenceFlow>

    Soft Deleted State
    <userTask id="SoftDeleted" name="Soft Deleted" />


        2. End condition needs to be added to the DECLINED
        3. Error state recovery? should we allow to move to previous state just like that? or we handle it via internal state-machine
-->
<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.omg.org/spec/BPMN/20100524/MODEL
                    http://www.omg.org/spec/BPMN/2.0/20100501/BPMN20.xsd"
             xmlns:activiti="http://activiti.org/bpmn"
             targetNamespace="Approvals">
    <process id="entity" name="Workflow Process for Entity Catalogue Approval" isExecutable="true">

        <!-- Initial Start Event -->
        <startEvent id="StartEvent" name="Start"/>
        <sequenceFlow id="flowStartToCreated" sourceRef="StartEvent" targetRef="Created"/>

        <!-- Created State -->
        <userTask id="Created" name="Created">
            <!-- <extensionElements> -->
            <!--          <activiti:taskListener event="complete" class="com.lbg.foundation.workflow.service.delegates.TaskCompletionListener"/> -->
            <!--  </extensionElements> -->
        </userTask>
        <sequenceFlow id="flowCreatedToAssigned" sourceRef="Created" targetRef="Assigned">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${next_state.equals('ASSIGNED')}]]></conditionExpression>
        </sequenceFlow>
        <sequenceFlow id="flowCreatedToCancelled" sourceRef="Created" targetRef="Cancelled">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${next_state.equals('CANCELLED')}]]></conditionExpression>
        </sequenceFlow>
        <sequenceFlow id="flowCreatedToError" sourceRef="Created" targetRef="Error">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${!(next_state.equals('ASSIGNED') || next_state.equals('CANCELLED'))}]]>
            </conditionExpression>
        </sequenceFlow>

        <!-- Assigned State -->
        <userTask id="Assigned" name="Assigned">
            <!-- <extensionElements> -->
            <!--          <activiti:taskListener event="complete" class="com.lbg.foundation.workflow.service.delegates.TaskCompletionListener"/> -->
            <!--  </extensionElements> -->
        </userTask>
        <sequenceFlow id="flowAssignedToEscalated" sourceRef="Assigned" targetRef="Escalated">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${next_state == 'ESCALATED'}]]></conditionExpression>
        </sequenceFlow>
        <sequenceFlow id="flowAssignedToApproved" sourceRef="Assigned" targetRef="Approved">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${next_state.equals('APPROVED')}]]></conditionExpression>
        </sequenceFlow>
        <sequenceFlow id="flowAssignedToDeclined" sourceRef="Assigned" targetRef="Declined">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${next_state.equals('DECLINED')}]]></conditionExpression>
        </sequenceFlow>
        <sequenceFlow id="flowAssignedToRework" sourceRef="Assigned" targetRef="Rework">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${next_state.equals('REWORK')}]]></conditionExpression>
        </sequenceFlow>
        <sequenceFlow id="flowAssignedToCancelled" sourceRef="Assigned" targetRef="Cancelled">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${next_state.equals('CANCELLED')}]]></conditionExpression>
        </sequenceFlow>
        <sequenceFlow id="flowAssignedToError" sourceRef="Assigned" targetRef="Error">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${!(next_state.equals('ESCALATED') || next_state.equals('APPROVED') || next_state.equals('DECLINED') || next_state.equals('REWORK') || next_state.equals('CANCELLED'))}]]>
            </conditionExpression>
        </sequenceFlow>

        <!-- Auto Escalation Timer -->
        <intermediateCatchEvent id="AutoEscalationTimer" name="Auto Escalation Timer">
            <timerEventDefinition>
                <timeDuration xsi:type="tFormalExpression"><![CDATA[PT${auto_escalation_time_seconds}S]]></timeDuration>
            </timerEventDefinition>
        </intermediateCatchEvent>
        <sequenceFlow id="flowAutoEscalationToEscalated" sourceRef="AutoEscalationTimer" targetRef="Escalated"/>

        <!-- Escalated State -->
        <userTask id="Escalated" name="Escalated">
            <!-- <extensionElements> -->
            <!--          <activiti:taskListener event="complete" class="com.lbg.foundation.workflow.service.delegates.TaskCompletionListener"/> -->
            <!--  </extensionElements> -->
        </userTask>
        <sequenceFlow id="flowEscalatedToDeescalated" sourceRef="Escalated" targetRef="Deescalated">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${next_state.equals('DEESCALATED')}]]></conditionExpression>
        </sequenceFlow>
        <sequenceFlow id="flowEscalatedToApproved" sourceRef="Escalated" targetRef="Approved">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${next_state.equals('APPROVED')}]]></conditionExpression>
        </sequenceFlow>
        <sequenceFlow id="flowEscalatedToDeclined" sourceRef="Escalated" targetRef="Declined">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${next_state.equals('DECLINED')}]]></conditionExpression>
        </sequenceFlow>
        <sequenceFlow id="flowEscalatedToRework" sourceRef="Escalated" targetRef="Rework">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${next_state.equals('REWORK')}]]></conditionExpression>
        </sequenceFlow>
        <sequenceFlow id="flowEscalatedToCancelled" sourceRef="Escalated" targetRef="Cancelled">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${next_state.equals('CANCELLED')}]]></conditionExpression>
        </sequenceFlow>
        <sequenceFlow id="flowEscalatedToError" sourceRef="Escalated" targetRef="Error">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${!(next_state.equals('DEESCALATED') || next_state.equals('APPROVED') || next_state.equals('DECLINED') || next_state.equals('REWORK') || next_state.equals('CANCELLED'))}]]></conditionExpression>

        </sequenceFlow>

        <!-- Deescalated State -->
        <userTask id="Deescalated" name="Deescalated">
            <!-- <extensionElements> -->
            <!--          <activiti:taskListener event="complete" class="com.lbg.foundation.workflow.service.delegates.TaskCompletionListener"/> -->
            <!--  </extensionElements> -->
        </userTask>
        <sequenceFlow id="flowDeescalatedToApproved" sourceRef="Deescalated" targetRef="Approved">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${next_state.equals('APPROVED')}]]></conditionExpression>
        </sequenceFlow>
        <sequenceFlow id="flowDeescalatedToDeclined" sourceRef="Deescalated" targetRef="Declined">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${next_state.equals('DECLINED')}]]></conditionExpression>
        </sequenceFlow>
        <sequenceFlow id="flowDeescalatedToRework" sourceRef="Deescalated" targetRef="Rework">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${next_state.equals('REWORK')}]]></conditionExpression>
        </sequenceFlow>
        <sequenceFlow id="flowDeescalatedToCancelled" sourceRef="Deescalated" targetRef="Cancelled">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${next_state.equals('CANCELLED')}]]></conditionExpression>
        </sequenceFlow>
        <sequenceFlow id="flowDeescalatedToError" sourceRef="Deescalated" targetRef="Error">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${!(next_state.equals('APPROVED') || next_state.equals('DECLINED') || next_state.equals('REWORK') || next_state.equals('CANCELLED'))}]]>
            </conditionExpression>
        </sequenceFlow>

        <!-- Declined State -->
        <userTask id="Declined" name="Declined">
            <!-- <extensionElements> -->
            <!--          <activiti:taskListener event="complete" class="com.lbg.foundation.workflow.service.delegates.TaskCompletionListener"/> -->
            <!--  </extensionElements> -->
        </userTask>
        <sequenceFlow id="flowDeclinedToEnd" sourceRef="Declined" targetRef="EndEvent"/>
        <sequenceFlow id="flowDeclinedToError" sourceRef="Declined" targetRef="Error">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${!next_state.equals('END')}]]></conditionExpression>
        </sequenceFlow>

        <!-- Approved State -->
        <userTask id="Approved" name="Approved">
            <!-- <extensionElements> -->
            <!--          <activiti:taskListener event="complete" class="com.lbg.foundation.workflow.service.delegates.TaskCompletionListener"/> -->
            <!--  </extensionElements> -->
        </userTask>
        <sequenceFlow id="flowApprovedToPreProductionCooldown" sourceRef="Approved"
                      targetRef="PreProductionCooldown"/>
        <sequenceFlow id="flowApprovedToError" sourceRef="Approved" targetRef="Error">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${!next_state.equals('PRE_PRODUCTION_COOLDOWN')}]]></conditionExpression>
        </sequenceFlow>

        <!-- Pre Production Cooldown Timer -->
        <intermediateCatchEvent id="PreProductionCooldownTimer" name="Pre Production Cooldown Timer">
            <timerEventDefinition>
                <timeDuration xsi:type="tFormalExpression">
                    <![CDATA[PT${pre_production_cooldown_seconds}S]]></timeDuration>
            </timerEventDefinition>
        </intermediateCatchEvent>
        <sequenceFlow id="flowPreProductionCooldownToProduction"
                      sourceRef="PreProductionCooldownTimer" targetRef="Production"/>

        <!-- Pre Production Cooldown State -->
        <userTask id="PreProductionCooldown" name="Pre Production Cooldown">
            <!-- <extensionElements> -->
            <!--          <activiti:taskListener event="complete" class="com.lbg.foundation.workflow.service.delegates.TaskCompletionListener"/> -->
            <!--  </extensionElements> -->
        </userTask>
        <sequenceFlow id="flowPreProductionCooldownToRework" sourceRef="PreProductionCooldown"
                      targetRef="Rework">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${next_state.equals('REWORK')}]]></conditionExpression>
        </sequenceFlow>
        <sequenceFlow id="flowPreProductionCooldownToError" sourceRef="PreProductionCooldown" targetRef="Error">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${!next_state.equals('REWORK')}]]></conditionExpression>
        </sequenceFlow>

        <!-- Production State -->
        <userTask id="Production" name="Production">
            <!-- <extensionElements> -->
            <!--          <activiti:taskListener event="complete" class="com.lbg.foundation.workflow.service.delegates.TaskCompletionListener"/> -->
            <!--  </extensionElements> -->
        </userTask>
        <sequenceFlow id="flowProductionToEnd" sourceRef="Production" targetRef="EndEvent"/>
        <sequenceFlow id="flowProductionToError" sourceRef="Production" targetRef="Error">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${!next_state.equals('END')}]]></conditionExpression>
        </sequenceFlow>

        <!-- Rework State -->
        <userTask id="Rework" name="Rework">
            <!-- <extensionElements> -->
            <!--          <activiti:taskListener event="complete" class="com.lbg.foundation.workflow.service.delegates.TaskCompletionListener"/> -->
            <!--  </extensionElements> -->
        </userTask>
        <sequenceFlow id="flowReworkToAssigned" sourceRef="Rework" targetRef="Assigned">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${next_state.equals('ASSIGNED')}]]></conditionExpression>
        </sequenceFlow>
        <sequenceFlow id="flowReworkToError" sourceRef="Rework" targetRef="Error">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${!next_state.equals('ASSIGNED')}]]></conditionExpression>
        </sequenceFlow>

        <!-- Cancelled State -->
        <userTask id="Cancelled" name="Cancelled">
            <!-- <extensionElements> -->
            <!--          <activiti:taskListener event="complete" class="com.lbg.foundation.workflow.service.delegates.TaskCompletionListener"/> -->
            <!--  </extensionElements> -->
        </userTask>
        <sequenceFlow id="flowCancelledToEnd" sourceRef="Cancelled" targetRef="EndEvent"/>

        <!-- Error State -->
        <userTask id="Error" name="Error">
            <!-- <extensionElements> -->
            <!--          <activiti:taskListener event="complete" class="com.lbg.foundation.workflow.service.delegates.TaskCompletionListener"/> -->
            <!--  </extensionElements> -->
        </userTask>
        <sequenceFlow id="flowErrorToEnd" sourceRef="Error" targetRef="EndEvent"/>

        <!-- End Event -->
        <endEvent id="EndEvent" name="End"/>
    </process>
</definitions>




```mermaid
stateDiagram-v2
    [*] --> Created
    Created --> Assigned
    Created --> Cancelled
    Assigned --> Escalated: After configured time / Manual, with comment
    Assigned --> Approved
    Assigned --> Declined
    Assigned --> Rework
    Assigned --> Cancelled
    Escalated --> Deescalated: With comment
    Escalated --> Approved
    Escalated --> Declined
    Escalated --> Rework
    Escalated --> Cancelled
    Deescalated --> Approved
    Deescalated --> Declined
    Deescalated --> Rework
    Deescalated --> Cancelled
    Approved --> PreProductionCooldown
    PreProductionCooldown --> Production: After configured time
    PreProductionCooldown --> Rework: Manual intervention only
    Production --> Cancelled
    Rework --> Assigned: Auto-assigned to same reviewer
    Rework --> Cancelled
    Cancelled --> PreDeleteCooldown: After configured time
    PreDeleteCooldown --> SoftDeleted: POINT OF NO RETURN
    PreDeleteCooldown --> Production: Manual intervention only if previous state was Production
    SoftDeleted --> PolicyBasedCleanup: Not an actual state, After this point the record is purged / archived
    PolicyBasedCleanup --> [*]
```