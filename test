import org.activiti.engine.*;
import org.activiti.engine.delegate.TaskListener;
import org.activiti.spring.SpringProcessEngineConfiguration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.DependsOn;
import org.springframework.transaction.PlatformTransactionManager;

import javax.sql.DataSource;
import java.util.Collections;

@Configuration
public class ActivitiConfig {

    @Autowired
    private CustomTaskListener customTaskListener;

    @Bean
    @DependsOn("dataSource")
    public SpringProcessEngineConfiguration processEngineConfiguration(
            DataSource dataSource, 
            PlatformTransactionManager transactionManager) {

        SpringProcessEngineConfiguration config = new SpringProcessEngineConfiguration();
        config.setDataSource(dataSource);
        config.setTransactionManager(transactionManager);
        config.setDatabaseSchemaUpdate("true"); // Set to true if schema update is allowed
        config.setDatabaseSchema("YOUR_SCHEMA_NAME");

        // Attach TaskListener directly to configuration for specific task events
        config.setCustomPreCommandInterceptors(
            Collections.singletonList(new CommandInterceptor() {
                @Override
                public <T> T execute(CommandConfig config, Command<T> command) {
                    if (command instanceof org.activiti.engine.impl.cmd.CompleteTaskCmd) {
                        TaskEntity taskEntity = ((CompleteTaskCmd) command).getTaskEntity();
                        taskEntity.addTaskListener(TaskListener.EVENTNAME_COMPLETE, customTaskListener);
                    }
                    return next.execute(config, command);
                }
            })
        );

        return config;
    }

    @Bean
    public ProcessEngine processEngine(SpringProcessEngineConfiguration config) {
        return config.buildProcessEngine();
    }

    @Bean
    public RepositoryService repositoryService(ProcessEngine processEngine) {
        return processEngine.getRepositoryService();
    }

    @Bean
    public RuntimeService runtimeService(ProcessEngine processEngine) {
        return processEngine.getRuntimeService();
    }

    @Bean
    public TaskService taskService(ProcessEngine processEngine) {
        return processEngine.getTaskService();
    }

    @Bean
    public HistoryService historyService(ProcessEngine processEngine) {
        return processEngine.getHistoryService();
    }

    @Bean
    public CustomTaskListener customTaskListener() {
        return new CustomTaskListener();
    }
}
