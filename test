import org.activiti.engine.*;
import org.activiti.engine.delegate.TaskListener;
import org.activiti.engine.delegate.event.ActivitiEvent;
import org.activiti.engine.delegate.event.ActivitiEventListener;
import org.activiti.engine.delegate.event.impl.ActivitiEntityEventImpl;
import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
import org.activiti.engine.task.Task;
import org.activiti.spring.SpringProcessEngineConfiguration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.DependsOn;
import org.springframework.transaction.PlatformTransactionManager;

import javax.sql.DataSource;

@Configuration
public class ActivitiConfig {

    @Autowired
    private CustomTaskListener customTaskListener;

    @Bean
    @DependsOn("dataSource")
    public SpringProcessEngineConfiguration processEngineConfiguration(
            DataSource dataSource,
            PlatformTransactionManager transactionManager) {

        SpringProcessEngineConfiguration config = new SpringProcessEngineConfiguration();
        config.setDataSource(dataSource);
        config.setTransactionManager(transactionManager);
        config.setDatabaseSchemaUpdate("true"); // Set to true if schema update is allowed
        config.setDatabaseSchema("YOUR_SCHEMA_NAME");

        // Attach a global event listener for task creation to add the custom TaskListener
        config.setEventListeners(Collections.singletonList(new ActivitiEventListener() {
            @Override
            public void onEvent(ActivitiEvent event) {
                if (event instanceof ActivitiEntityEventImpl) {
                    Object entity = ((ActivitiEntityEventImpl) event).getEntity();
                    if (entity instanceof Task) {
                        Task task = (Task) entity;
                        // Attach the TaskListener to the task's complete event
                        task.addTaskListener(TaskListener.EVENTNAME_COMPLETE, customTaskListener);
                    }
                }
            }

            @Override
            public boolean isFailOnException() {
                return false; // set to true if you want the process to fail on listener exception
            }
        }));

        return config;
    }

    @Bean
    public ProcessEngine processEngine(SpringProcessEngineConfiguration config) {
        return config.buildProcessEngine();
    }

    @Bean
    public RepositoryService repositoryService(ProcessEngine processEngine) {
        return processEngine.getRepositoryService();
    }

    @Bean
    public RuntimeService runtimeService(ProcessEngine processEngine) {
        return processEngine.getRuntimeService();
    }

    @Bean
    public TaskService taskService(ProcessEngine processEngine) {
        return processEngine.getTaskService();
    }

    @Bean
    public HistoryService historyService(ProcessEngine processEngine) {
        return processEngine.getHistoryService();
    }

    @Bean
    public CustomTaskListener customTaskListener() {
        return new CustomTaskListener();
    }
}
