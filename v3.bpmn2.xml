<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:activiti="http://activiti.org/bpmn"
             targetNamespace="http://www.activiti.org/test">
  <process id="WorkflowProcess" name="Workflow Process" isExecutable="true">
    
    <!-- Variables -->
    <property id="nextState" name="nextState" />
    <property id="PreDeleteCooldownSeconds" name="PreDeleteCooldownSeconds" />
    <property id="PreProductionCooldownSeconds" name="PreProductionCooldownSeconds" />
    <property id="AutoEscalationTimeInSeconds" name="AutoEscalationTimeInSeconds" />

    <!-- Initial Start Event -->
    <startEvent id="StartEvent" name="Start" />
    <sequenceFlow id="flowStartToCreated" sourceRef="StartEvent" targetRef="Created" />

    <!-- Created State -->
    <userTask id="Created" name="Created" />
    <sequenceFlow id="flowCreatedToAssigned" sourceRef="Created" targetRef="Assigned" />
    <sequenceFlow id="flowCreatedToCancelled" sourceRef="Created" targetRef="Cancelled" />

    <!-- Assigned State -->
    <userTask id="Assigned" name="Assigned" />
    <sequenceFlow id="flowAssignedToEscalated" sourceRef="Assigned" targetRef="Escalated">
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[nextState == 'Escalated']]></conditionExpression>
    </sequenceFlow>
    <sequenceFlow id="flowAssignedToApproved" sourceRef="Assigned" targetRef="Approved">
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[nextState == 'Approved']]></conditionExpression>
    </sequenceFlow>
    <sequenceFlow id="flowAssignedToDeclined" sourceRef="Assigned" targetRef="Declined">
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[nextState == 'Declined']]></conditionExpression>
    </sequenceFlow>
    <sequenceFlow id="flowAssignedToRework" sourceRef="Assigned" targetRef="Rework" />
    <sequenceFlow id="flowAssignedToCancelled" sourceRef="Assigned" targetRef="Cancelled" />

    <!-- Auto Escalation Timer -->
    <intermediateCatchEvent id="AutoEscalationTimer" name="Auto Escalation Timer">
      <timerEventDefinition>
        <timeDuration xsi:type="tFormalExpression"><![CDATA[PT${AutoEscalationTimeInSeconds}S]]></timeDuration>
      </timerEventDefinition>
    </intermediateCatchEvent>
    <sequenceFlow id="flowAutoEscalationToEscalated" sourceRef="AutoEscalationTimer" targetRef="Escalated" />

    <!-- Escalated State -->
    <userTask id="Escalated" name="Escalated" />
    <sequenceFlow id="flowEscalatedToDeescalated" sourceRef="Escalated" targetRef="Deescalated" />
    <sequenceFlow id="flowEscalatedToApproved" sourceRef="Escalated" targetRef="Approved" />
    <sequenceFlow id="flowEscalatedToDeclined" sourceRef="Escalated" targetRef="Declined" />
    <sequenceFlow id="flowEscalatedToRework" sourceRef="Escalated" targetRef="Rework" />
    <sequenceFlow id="flowEscalatedToCancelled" sourceRef="Escalated" targetRef="Cancelled" />

    <!-- Deescalated State -->
    <userTask id="Deescalated" name="Deescalated" />
    <sequenceFlow id="flowDeescalatedToApproved" sourceRef="Deescalated" targetRef="Approved" />
    <sequenceFlow id="flowDeescalatedToDeclined" sourceRef="Deescalated" targetRef="Declined" />
    <sequenceFlow id="flowDeescalatedToRework" sourceRef="Deescalated" targetRef="Rework" />
    <sequenceFlow id="flowDeescalatedToCancelled" sourceRef="Deescalated" targetRef="Cancelled" />

    <!-- Declined State -->
    <userTask id="Declined" name="Declined" />

    <!-- Approved State -->
    <userTask id="Approved" name="Approved" />
    <sequenceFlow id="flowApprovedToPreProductionCooldown" sourceRef="Approved" targetRef="PreProductionCooldown" />

    <!-- Pre Production Cooldown Timer -->
    <intermediateCatchEvent id="PreProductionCooldownTimer" name="Pre Production Cooldown Timer">
      <timerEventDefinition>
        <timeDuration xsi:type="tFormalExpression"><![CDATA[PT${PreProductionCooldownSeconds}S]]></timeDuration>
      </timerEventDefinition>
    </intermediateCatchEvent>
    <sequenceFlow id="flowPreProductionCooldownToProduction" sourceRef="PreProductionCooldownTimer" targetRef="Production" />

    <!-- Pre Production Cooldown State -->
    <userTask id="PreProductionCooldown" name="Pre Production Cooldown" />
    <sequenceFlow id="flowPreProductionCooldownToCancelled" sourceRef="PreProductionCooldown" targetRef="Cancelled">
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[nextState == 'Cancelled']]></conditionExpression>
    </sequenceFlow>

    <!-- Production State -->
    <userTask id="Production" name="Production" />
    <sequenceFlow id="flowProductionToCancelled" sourceRef="Production" targetRef="Cancelled" />

    <!-- Rework State -->
    <userTask id="Rework" name="Rework" />
    <sequenceFlow id="flowReworkToAssigned" sourceRef="Rework" targetRef="Assigned" />
    <sequenceFlow id="flowReworkToCancelled" sourceRef="Rework" targetRef="Cancelled" />

    <!-- Cancelled State -->
    <userTask id="Cancelled" name="Cancelled" />
    <sequenceFlow id="flowCancelledToPreDeleteCooldown" sourceRef="Cancelled" targetRef="PreDeleteCooldown" />

    <!-- Pre Delete Cooldown Timer -->
    <intermediateCatchEvent id="PreDeleteCooldownTimer" name="Pre Delete Cooldown Timer">
      <timerEventDefinition>
        <timeDuration xsi:type="tFormalExpression"><![CDATA[PT${PreDeleteCooldownSeconds}S]]></timeDuration>
      </timerEventDefinition>
    </intermediateCatchEvent>
    <sequenceFlow id="flowPreDeleteCooldownToSoftDeleted" sourceRef="PreDeleteCooldownTimer" targetRef="SoftDeleted" />

    <!-- Pre Delete Cooldown State -->
    <userTask id="PreDeleteCooldown" name="Pre Delete Cooldown" />
    <sequenceFlow id="flowPreDeleteCooldownToProduction" sourceRef="PreDeleteCooldown" targetRef="Production">
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[nextState == 'Production' && previousState == 'Production']]></conditionExpression>
    </sequenceFlow>

    <!-- Soft Deleted State -->
    <userTask id="SoftDeleted" name="Soft Deleted" />

    <!-- End Event -->
    <endEvent id="EndEvent" />
    <sequenceFlow id="flowSoftDeletedToEnd" sourceRef="SoftDeleted" targetRef="EndEvent" />

  </process>
</definitions>
